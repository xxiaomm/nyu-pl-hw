;; Question 1:
ï»¿;; (byTwos n m) returns the list of every other integer starting with n up to m.
;; Base Case: if n > m, the result is the empty list.
;; Hypothesis: Assume (byTwos (+ n 2) m) returns the list of every other integer
;; from n+2 up to m.
;; Recursive step: (byTwos n m) returns (cons n (byTwos (+ n 2) m))
(define (byTwos n m)
    (cond ((> n m ) (list))
    (else (cons n (byTwos (+ 2 n) m)))))



;; Question 2:
;; (compress L) returns the list of all the atoms(non-list values) contained in L.
;; Base case: if L is empty list or not a list, return an empty list.
;; Hypothesis: Assume (compress L) returns the list of the atoms of (car L) and (cdr L).
;; Recursive step: (compress L) returns (append (cond ( (list? (car L))  (compress (car L)) )
;;                                              (else (list(car L))) )
;;                                              (compress (cdr L)) )

(define (compress L)
  (cond ( (not(pair? L)) (list) )
  (else (append (cond ( (list? (car L))  (compress (car L)) )
                      (else (list(car L))) )
                (compress (cdr L)) )
        ) 
   )
)
;;(compress '(1 (2 3 (4 5) (6 7 (8)) 9) 10))
;;(compress '(((11) (2 3)) 6 7))



;; Question 3:




;; Question 4:
;; (equalTo? x y) returns a boolean value, which is the result of x == y.
;; Base case: if x  or y is empty list or not a list, return (eq? x y).
;; Hypothesis: Assume (equalTo? x y) returns each atoms' result in the list of (car x) == (car y)
;; Recursive step: (equalTo? x y) returns (cond ((equalTo? (car x) (car y))
;;                                                         (equalTo? (cdr x) (cdr y)) )
;;                                        (else (equalTo? (car x) (car y)) ) )

(define (equalTo? x y)
  (cond ( (not(pair? x)) (eq? x y) )
        ( (not(pair? y)) (eq? x y) )
        (else (cond ((equalTo? (car x) (car y)) (equalTo? (cdr x) (cdr y)) )
                    (else (equalTo? (car x) (car y)) ) ) )
        )
)




;; Question 5:




;; Question 6:




;; Question 7:



;; Question 8:



;; Question 9:




;; Question 10:


